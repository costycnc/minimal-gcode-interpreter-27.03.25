// Firmware CostyCNC Light per GRBL Shield V4.0
// Senza controllo utensile (regolazione manuale)
// https://www.costycnc.it

volatile int32_t x0=0, x1=0, y0=0, y1=0, z0=0, z1=0;
volatile uint16_t step_delay = 1000; // Default 1kHz (60mm/min)
volatile uint16_t step_counter = 0;
volatile uint8_t moving = 0;

// Configurazione pin CNC Shield V4.0
#define X_STEP 2
#define X_DIR 5
#define Y_STEP 3
#define Y_DIR 6
#define Z_STEP 4
#define Z_DIR 7
#define STEP_MASK ((1<<X_STEP)|(1<<Y_STEP)|(1<<Z_STEP))

ISR(TIMER1_COMPA_vect) {  // Timer stepping 10kHz
  if(moving && ++step_counter >= step_delay) {
    step_counter = 0;
    
    // Genera impulso STEP ottimizzato
    PORTD |= STEP_MASK;
    __asm__ __volatile__("nop\n\t"); // Ritardo 62.5ns
    PORTD &= ~STEP_MASK;
    
    // Movimento Bresenham
    if(x0 != x1) { 
      digitalWrite(X_DIR, x1 > x0);
      x0 += (x1 > x0) ? 1 : -1;
    }
    if(y0 != y1) {
      digitalWrite(Y_DIR, y1 > y0);
      y0 += (y1 > y0) ? 1 : -1;
    }
    if(z0 != z1) {
      digitalWrite(Z_DIR, z1 > z0);
      z0 += (z1 > z0) ? 1 : -1;
    }
    
    if(x0==x1 && y0==y1 && z0==z1) moving = 0;
  }
}

void process_gcode(String cmd) {
  static float feedrate = 60.0; // mm/min
  
  if(cmd.startsWith("F")) { // Solo feedrate
    feedrate = cmd.substring(1).toFloat();
    step_delay = 60000000 / (feedrate * 200 * 2); // 200 steps/mm
    step_delay = max(20, step_delay); // Limita a 50kHz max
  }
  else if(cmd.startsWith("X")) x1 = cmd.substring(1).toFloat() * 200;
  else if(cmd.startsWith("Y")) y1 = cmd.substring(1).toFloat() * 200;
  else if(cmd.startsWith("Z")) z1 = cmd.substring(1).toFloat() * 200;
  
  moving = 1;
  Serial.print("ok F"); Serial.println(feedrate);
}

void setup() {
  DDRD |= B11111100; // Imposta pin 2-7 come output
  
  // Timer1 per interrupt stepping (10kHz)
  TCCR1A = 0;
  TCCR1B = (1<<WGM12) | (1<<CS10);
  OCR1A = 1599;
  TIMSK1 = (1<<OCIE1A);
  
  Serial.begin(115200);
  Serial.println("CostyCNC Light ready");
}

void loop() {
  static String buffer;
  
  while(Serial.available()) {
    char c = Serial.read();
    if(c == '\r') {
      process_gcode(buffer);
      buffer = "";
    } else if(c != ' ') {
      buffer += c;
    }
  }
  
  // Timeout motori
  static uint32_t last_move = 0;
  if(moving) last_move = millis();
  else if(millis() - last_move > 2000) {
    PORTD &= ~STEP_MASK; // Disabilita tutti gli step
  }
}
